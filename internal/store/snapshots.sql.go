// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: snapshots.sql

package store

import (
	"context"
	"encoding/json"
)

const CountSnapshotsByMonth = `-- name: CountSnapshotsByMonth :one
SELECT COUNT(*) FROM snapshots WHERE month = $1
`

func (q *Queries) CountSnapshotsByMonth(ctx context.Context, month string) (int64, error) {
	row := q.db.QueryRow(ctx, CountSnapshotsByMonth, month)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const GetSnapshot = `-- name: GetSnapshot :one
SELECT id, month, movie_id, tallies, closed_at
FROM snapshots
WHERE month = $1 AND movie_id = $2
`

type GetSnapshotParams struct {
	Month   string `json:"month"`
	MovieID int64  `json:"movie_id"`
}

func (q *Queries) GetSnapshot(ctx context.Context, arg GetSnapshotParams) (Snapshot, error) {
	row := q.db.QueryRow(ctx, GetSnapshot, arg.Month, arg.MovieID)
	var i Snapshot
	err := row.Scan(
		&i.ID,
		&i.Month,
		&i.MovieID,
		&i.Tallies,
		&i.ClosedAt,
	)
	return i, err
}

const GetSnapshotsByMonth = `-- name: GetSnapshotsByMonth :many
SELECT id, month, movie_id, tallies, closed_at
FROM snapshots
WHERE month = $1
ORDER BY movie_id ASC
`

func (q *Queries) GetSnapshotsByMonth(ctx context.Context, month string) ([]Snapshot, error) {
	rows, err := q.db.Query(ctx, GetSnapshotsByMonth, month)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Snapshot{}
	for rows.Next() {
		var i Snapshot
		if err := rows.Scan(
			&i.ID,
			&i.Month,
			&i.MovieID,
			&i.Tallies,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListSnapshotsByMonthPage = `-- name: ListSnapshotsByMonthPage :many
SELECT id, month, movie_id, tallies, closed_at
FROM snapshots
WHERE month = $1
  AND ($2::bigint = 0 OR movie_id > $2)
ORDER BY movie_id ASC
LIMIT $3
`

type ListSnapshotsByMonthPageParams struct {
	Month   string `json:"month"`
	Column2 int64  `json:"column_2"`
	Limit   int32  `json:"limit"`
}

func (q *Queries) ListSnapshotsByMonthPage(ctx context.Context, arg ListSnapshotsByMonthPageParams) ([]Snapshot, error) {
	rows, err := q.db.Query(ctx, ListSnapshotsByMonthPage, arg.Month, arg.Column2, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Snapshot{}
	for rows.Next() {
		var i Snapshot
		if err := rows.Scan(
			&i.ID,
			&i.Month,
			&i.MovieID,
			&i.Tallies,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpsertSnapshot = `-- name: UpsertSnapshot :exec
INSERT INTO snapshots (month, movie_id, tallies)
VALUES ($1, $2, $3)
ON CONFLICT (month, movie_id) DO UPDATE SET
  tallies = EXCLUDED.tallies,
  closed_at = now()
`

type UpsertSnapshotParams struct {
	Month   string          `json:"month"`
	MovieID int64           `json:"movie_id"`
	Tallies json.RawMessage `json:"tallies"`
}

func (q *Queries) UpsertSnapshot(ctx context.Context, arg UpsertSnapshotParams) error {
	_, err := q.db.Exec(ctx, UpsertSnapshot, arg.Month, arg.MovieID, arg.Tallies)
	return err
}
